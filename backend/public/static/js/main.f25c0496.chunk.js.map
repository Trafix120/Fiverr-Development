{"version":3,"sources":["NewMap.js","App.js","reportWebVitals.js","index.js"],"names":["NewMap","googleMapRef","useRef","googleMap","useEffect","googleMapScript","document","createElement","src","process","async","window","body","appendChild","addEventListener","createGoogleMap","callBluefolderApi","console","log","google","maps","Map","current","zoom","center","lat","lng","disableDefaultUI","a","fetch","res","json","customerData","showUserMarkers","i","length","coordinates","Marker","position","map","animation","Animation","DROP","title","customerName","className","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"yOAyEeA,EAtEA,WACb,IAAMC,EAAeC,mBACjBC,EAAY,GAGhBC,qBAAU,WACR,IAAMC,EAAkBC,SAASC,cAAc,UAC/CF,EAAgBG,IAAhB,sDAAqEC,0CAArE,qBACAJ,EAAgBK,OAAQ,EACxBC,OAAOL,SAASM,KAAKC,YAAYR,GAEjCA,EAAgBS,iBAAiB,QAAQ,WACvCC,IACAC,SAED,IAEH,IAAMD,EAAkB,WACtBE,QAAQC,IAAIf,GACZA,EAAY,IAAIQ,OAAOQ,OAAOC,KAAKC,IAAIpB,EAAaqB,QAAS,CAC3DC,KAAM,GACNC,OAAQ,CACNC,IAAK,UACLC,KAAM,WAERC,kBAAkB,KAGhBX,EAAiB,uCAAG,8BAAAY,EAAA,+EAENC,MAAM,wBAFA,cAElBC,EAFkB,gBAGGA,EAAIC,OAHP,OAGlBC,EAHkB,OAItBC,EAAgBD,GAJM,kDAOtBf,QAAQC,IAAR,MAPsB,0DAAH,qDAWjBe,EAAkB,SAACD,GACvB,GAAuB,MAAnBA,EAAa,GAAjB,CAIAf,QAAQC,IAAIc,GACZ,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,IACJ,MAA/BF,EAAaE,GAAGE,aAIpB,IAAIzB,OAAOQ,OAAOC,KAAKiB,OAAO,CAC5BC,SAAU,CACRb,IAAKO,EAAaE,GAAGE,YAAYX,IACjCC,IAAKM,EAAaE,GAAGE,YAAYV,KAEnCa,IAAKpC,EACLqC,UAAW7B,OAAOQ,OAAOC,KAAKqB,UAAUC,KACxCC,MAAOX,EAAaE,GAAGU,iBAM7B,OACE,qBAAKC,UAAU,MACbC,IAAK7C,KCxDI8C,MARf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,cAAC,EAAD,OCKSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACApD,SAASqD,eAAe,SAM1BX,K","file":"static/js/main.f25c0496.chunk.js","sourcesContent":["import React, { useRef, useEffect} from 'react'\r\nimport './App.css'\r\n\r\nconst NewMap = () => {\r\n  const googleMapRef = useRef();\r\n  var googleMap = {};\r\n\r\n  //Load Google Map script\r\n  useEffect(() => {\r\n    const googleMapScript = document.createElement(\"script\");\r\n    googleMapScript.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_API_KEY}&libraries=places`;\r\n    googleMapScript.async = true;\r\n    window.document.body.appendChild(googleMapScript);\r\n\r\n    googleMapScript.addEventListener(\"load\", () => {\r\n      createGoogleMap();\r\n      callBluefolderApi();\r\n    });\r\n  }, []);\r\n\r\n  const createGoogleMap = () => {\r\n    console.log(googleMap);\r\n    googleMap = new window.google.maps.Map(googleMapRef.current, {\r\n      zoom: 10,\r\n      center: {\r\n        lat: 29.749907,\r\n        lng: -95.358421,\r\n      },\r\n      disableDefaultUI: false,\r\n    });\r\n  }\r\n  const callBluefolderApi = async () => {\r\n    try {\r\n      let res = await fetch(\"/api/servicerequests\");\r\n      let customerData = await res.json();\r\n      showUserMarkers(customerData);\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const showUserMarkers = (customerData) => {\r\n    if (customerData[0] == null){\r\n      return;\r\n    }\r\n    \r\n    console.log(customerData);\r\n    for (let i = 0; i < customerData.length; i++) {\r\n      if (customerData[i].coordinates == null){\r\n        continue;\r\n      }\r\n      //console.log(customerData[i]);\r\n      new window.google.maps.Marker({\r\n        position: {\r\n          lat: customerData[i].coordinates.lat,\r\n          lng: customerData[i].coordinates.lng,\r\n        },\r\n        map: googleMap,\r\n        animation: window.google.maps.Animation.DROP,\r\n        title: customerData[i].customerName,\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"Map\" \r\n      ref={googleMapRef}\r\n    />\r\n  );\r\n};\r\n\r\nexport default NewMap;","import React from 'react'\nimport './App.css'\nimport NewMap from './NewMap'\n\nfunction App (){\n  return(\n    <div className=\"App\">\n      <NewMap />\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}